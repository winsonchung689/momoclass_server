<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xue.repository.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.xue.entity.model.Message">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="photo" property="photo" javaType="[B" jdbcType="BLOB"/>
  </resultMap>
  <resultMap id="BaseSchedule" type="com.xue.entity.model.Schedule">
    <result column="add_date" jdbcType="VARCHAR" property="add_date" />
    <result column="student_name" jdbcType="VARCHAR" property="student_name" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, password
  </sql>
  <select id="selectByExample" parameterType="com.xue.entity.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xue.entity.model.UserExample">
    delete from message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xue.entity.model.Message">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into message (name, password)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xue.entity.model.Message">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xue.entity.model.UserExample" resultType="java.lang.Long">
    select count(*) from message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update message
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update message
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xue.entity.model.Message">
    update message
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xue.entity.model.Message">
    update message
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 获取全部 -->
  <select id="getMessage" parameterType="com.xue.entity.model.Message" resultMap="BaseResultMap">
      select id,student_name,photo,comment,create_time,class_name,class_target from class_comment where class_target != '范画' order by create_time desc
  </select>

  <!-- 获取范画 -->
  <select id="getModel" parameterType="com.xue.entity.model.Message" resultMap="BaseResultMap">
    select id,student_name,photo,comment,create_time,class_name,class_target from class_comment where class_target='范画'  order by create_time desc
  </select>

  <!-- 获取全部 -->
  <select id="getSearch" parameterType="com.xue.entity.model.Message" resultMap="BaseResultMap">
    select id,student_name,photo,comment,create_time,class_name,class_target from class_comment where student_name like '%#{0}%' and class_target != '范画'  order by create_time desc
  </select>

  <!-- 获取详情 -->
  <select id="getDetails" parameterType="com.xue.entity.model.Message" resultMap="BaseResultMap">
    select id,student_name,photo,comment,create_time,class_name,class_target from class_comment where id =#{0} and class_target != '范画'
  </select>

  <!-- 获取详情 -->
  <select id="deleteComment" parameterType="com.xue.entity.model.Message" resultMap="BaseResultMap">
    delete from class_comment where id =#{0}
  </select>

  <!-- 获取课程表 -->
  <select id="getSchedule" parameterType="com.xue.entity.model.Schedule" resultMap="BaseSchedule">
    select id,add_date,age,student_name,duration,create_time from class_schedule where add_date between DATE_SUB(curdate(),INTERVAL 0 DAY) and DATE_SUB(curdate(),INTERVAL -7 DAY)  order by add_date
  </select>

  <!-- 插入信息 -->
  <insert id="push" parameterType="com.xue.entity.model.Message">
      insert class_comment(student_name,photo,comment,create_time,class_name,class_target) values(#{student_name},#{photo},#{comment},#{create_time},#{class_name},#{class_target})
  </insert>

  <!-- 插入课程表 -->
  <insert id="insertSchedule" parameterType="com.xue.entity.model.Schedule">
    insert class_schedule(add_date,age,student_name,duration,create_time) values(#{add_date},#{age},#{student_name},#{duration},#{create_time})
  </insert>

  <!-- 插入客户信息 -->
  <insert id="insertUser" parameterType="com.xue.entity.model.Message">
    insert class_comment(nick_name,role,create_time) values(#{nick_name},#{role},#{create_time})
  </insert>


</mapper>